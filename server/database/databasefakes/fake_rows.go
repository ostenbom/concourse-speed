// Code generated by counterfeiter. DO NOT EDIT.
package databasefakes

import (
	"sync"

	_ "github.com/lib/pq"
	"github.com/ostenbom/concourse-speed/server/database"
)

type FakeRows struct {
	NextStub        func() bool
	nextMutex       sync.RWMutex
	nextArgsForCall []struct{}
	nextReturns     struct {
		result1 bool
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
	}
	ScanStub        func(...interface{}) error
	scanMutex       sync.RWMutex
	scanArgsForCall []struct {
		arg1 []interface{}
	}
	scanReturns struct {
		result1 error
	}
	scanReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRows) Next() bool {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct{}{})
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if fake.NextStub != nil {
		return fake.NextStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nextReturns.result1
}

func (fake *FakeRows) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeRows) NextReturns(result1 bool) {
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRows) NextReturnsOnCall(i int, result1 bool) {
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRows) Scan(arg1 ...interface{}) error {
	fake.scanMutex.Lock()
	ret, specificReturn := fake.scanReturnsOnCall[len(fake.scanArgsForCall)]
	fake.scanArgsForCall = append(fake.scanArgsForCall, struct {
		arg1 []interface{}
	}{arg1})
	fake.recordInvocation("Scan", []interface{}{arg1})
	fake.scanMutex.Unlock()
	if fake.ScanStub != nil {
		return fake.ScanStub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.scanReturns.result1
}

func (fake *FakeRows) ScanCallCount() int {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return len(fake.scanArgsForCall)
}

func (fake *FakeRows) ScanArgsForCall(i int) []interface{} {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return fake.scanArgsForCall[i].arg1
}

func (fake *FakeRows) ScanReturns(result1 error) {
	fake.ScanStub = nil
	fake.scanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) ScanReturnsOnCall(i int, result1 error) {
	fake.ScanStub = nil
	if fake.scanReturnsOnCall == nil {
		fake.scanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRows) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.Rows = new(FakeRows)
